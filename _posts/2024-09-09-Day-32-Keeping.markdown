---
layout: post
title:  "Day 32 - Keeping the pace is actually hard"
date:   2024-10-25 17:10:00 +0200
categories: jekyll update
---


![custom header](https://raw.githubusercontent.com/Akirapearl/jekyll_blog/main/assets/images/maik-jonietz.jpg)
About: Photo by <a href="https://unsplash.com/@der_maik_?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Maik Jonietz</a> on <a href="https://unsplash.com/photos/program-script-digital-wallpaper-_yMciiStJyY?utm_content=creditCopyText&utm_medium=referral&utm_source=unsplash">Unsplash</a>
  

### Quick note about the duration of this challenge

Back on October 7th, I made it to the technically 92th day of this challenge if I would have done at least an hour of coding each day, 
but it is not as easy when you have a full-time job, other studies ongoing (as for myself, I'm also currently studying
catalonian) and other obligations. 

I've already accepted that I won't be able to finish this challenge by the expected date goal (November 19th), yet I believe that making this
learning process part of my routine until the end of the year or so, updating this blog with my progress and my will to learn should be fine as well, learning
is a process, a marathon of sorts, not a speedrun.

I don't want to make excuses, yet it is true that I feel how life has gotten in between, making me a bit of lack in practice and context for what
I came to learn upon this point.

That being said, let's get back to it.

#### Day 32 - 25/10/2024

Today I kept it easy on myself and got back to the book I was reading, I finished another chapter! This one was about error handling and logging.
Now I am on the verge of getting introduced to how to use MySQL databases and all, also almost finished the first quarter of the book thus far!,
so I think that stopping here and focusing onto the CRUD part of my own project would be interesting to know, so when I learn about databases I can actually apply it on my own project of sorts.

#### Day 33 - 26/10/2024

Got back to code, in short, I introduced the capability for my [password manager](https://github.com/Akirapearl/Go-password-manager/tree/main) to ask multiple times to introduce values onto the CSV file, this enables 
the user to not need to execute the script multiple times until all records are introduced.

As seen at main.go file:

```go
for {
		// Write single line to file
		change.WriteLine(path)

		fmt.Println("=== Updated content of your file - Insert ===")
		fmt.Printf("\n")
		read.ReadFile(path)

		fmt.Println("\n Do you want to enter more data?[y/n]")

		var respData string
		fmt.Scan(&respData)

		if respData != "y" && respData != "Y" {
			break
		}
		fmt.Print("\033[;1H\033[2J")
	}
```

And the improved called function from write.go file:

```go
func WriteLine(file string) {
	// Ask for values to be added to the file
	fmt.Println("Introduce your username")

	var dataWrite [3]string
	fmt.Scan(&dataWrite[0])

	fmt.Println("Now, introduce the site or URL for your user (i.e: Google / 'www.google.com')")
	fmt.Scan(&dataWrite[1])

	fmt.Println("Finally, introduce your password")
	fmt.Scan(&dataWrite[2])

	// Open the CSV file for appending
	fileW, err := os.OpenFile(file, os.O_CREATE|os.O_WRONLY|os.O_APPEND, os.ModePerm)

	// Create a CSV writer
	writer := csv.NewWriter(fileW)

	// Write a new row to the CSV file
	// Current placed credentials were randomly generated and don't represent a real user
	// Expected structure for the CSV is [user,account/site, password]
	row := []string{dataWrite[0], dataWrite[1], dataWrite[2]}
	err = writer.Write(row)
	check(err)
	writer.Flush()
}
```

#### Day 34 - 27/10/2024

Here in Spain we have something totally unnecesary that is the time change twice a year, this particular one was to move from summer to winter time, or at least
that's the common justification, that made me mostly become really dizzy and lazy for the day, BUT, I achieved some minor progress over my password manager.

Now I have a new file totally dedicated to update entries already existent within the provided CSV file, as for now it requires to enter all three parameters
in order to verify it exists, but I would like to explore a different approach in the future, if necessary. 

```go
package change

import "fmt"

func UpdateLine(file string) {
	// Ask for values to check
	fmt.Println("Update mode - Introduce your username")

	var dataUpdate [3]string
	fmt.Scan(&dataUpdate[0])

	fmt.Println("Now, introduce the site or URL for your user (i.e: Google / 'www.google.com')")
	fmt.Scan(&dataUpdate[1])

	fmt.Println("Finally, introduce your password")
	fmt.Scan(&dataUpdate[2])

	// Validate if field exists

	fmt.Println("Which field do you want to change?", dataUpdate[0], dataUpdate[1], dataUpdate[2])

}
```

I made it part of the change package, so I might be able to re-utilize the check function for error verification

```go
func check(err error) error {
	if err != nil {
		return err
	}
	return nil
}
```

#### Day 35 - 28/10/2024

Keeping it up with the update process, I achieved to create a separate case for verification, that is in charge of modifying the array's value into a new one also
passed by the user as an input.

current status:

```go
package change

import "fmt"

func switchValidate(v int, old *[3]string, new string) string {
	switch v {
	case 0:
		old[0] = new
		fmt.Printf("New value is: %v", new)
	case 1:
		old[1] = new
		fmt.Printf("New value is: %v", new)
	case 2:
		old[2] = new
		fmt.Printf("New value is: %v", new)
	default:
		fmt.Println("The number is wrong!")
	}
	return "none"
}
func UpdateLine(file string) {
	// Ask for values to check
	fmt.Println("Update mode - Introduce your username")

	var dataUpdate [3]string
	fmt.Scan(&dataUpdate[0])

	fmt.Println("Now, introduce the site or URL for your user (i.e: Google / 'www.google.com')")
	fmt.Scan(&dataUpdate[1])

	fmt.Println("Finally, introduce your password")
	fmt.Scan(&dataUpdate[2])

	// Validate/Verify if field exists
	fmt.Println("Which field do you want to change [0/1/2]?", dataUpdate[0], dataUpdate[1], dataUpdate[2])
	var updatePrompt int
	fmt.Scan(&updatePrompt)

	fmt.Println("Which value would you like to assign to that field? ")
	var newPrompt string
	fmt.Scan(&newPrompt)

	//Pass value alongside the content of the array
	switchValidate(updatePrompt, &dataUpdate, newPrompt)
}
```
